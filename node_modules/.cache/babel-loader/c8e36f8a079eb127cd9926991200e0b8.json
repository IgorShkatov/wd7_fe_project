{"ast":null,"code":"// тут записываем так называемые экшн криэйторы - т.е. JS функции, которые должны сгенерировать\n// и вернуть JS объект, который в свою очередь будет описывать ACTION - событие в экосистеме Redux\nimport * as ACT from './actions';\nexport function updateCatalogList(payload) {\n  return {\n    // это JS объект - и есть тот самый реальный Redux action\n    type: ACT.UPDATE_LIST,\n    payload\n  };\n}\nexport function fetchFailed() {\n  return {\n    type: ACT.FETCH_FAILED\n  };\n}\nexport function fetchSuccess() {\n  return {\n    type: ACT.FETCH_SUCCESS\n  };\n}\nexport function updateLoading(payload) {\n  return {\n    type: ACT.UPDATE_LOADING,\n    payload\n  };\n}\nexport function fetchData(searchText) {\n  return dispatcher => {\n    dispatcher(updateLoading(true)); // установить индикатор загрузки данных в ТРУ - включить спинер\n\n    const data = fetch('http://test-api.ipromote.ru/API/CATALOG/FIND');\n    data.then(response => {\n      return response.json();\n    }).then(localData => {\n      // this.setState({movieList: data}); - остатки от вызова в классе (когда фетчинг данных из класса)\n      dispatcher(updateCatalogList(localData)); // записать в ридакс стор список фильмов\n\n      dispatcher(fetchSuccess()); // установить статус состояния загрузки - УСПЕШНО загружены данные\n    }).catch(e => {\n      dispatcher(fetchFailed()); // установить статус состояния загрузки - ПРОВАЛ данные НЕ удалось загрузить\n\n      console.log('Sabotage: data fetch ERROR.', e);\n    }).finally(() => {\n      dispatcher(updateLoading(false)); // установить индикатор загрузки данных в FALSE (выключить спинер)\n    });\n  };\n}","map":{"version":3,"sources":["/Users/dmitrijkotelevic/dev/wd7_fe_project/src/store/action_creatores.js"],"names":["ACT","updateCatalogList","payload","type","UPDATE_LIST","fetchFailed","FETCH_FAILED","fetchSuccess","FETCH_SUCCESS","updateLoading","UPDATE_LOADING","fetchData","searchText","dispatcher","data","fetch","then","response","json","localData","catch","e","console","log","finally"],"mappings":"AAAA;AACA;AACA,OAAO,KAAKA,GAAZ,MAAqB,WAArB;AAEA,OAAO,SAASC,iBAAT,CAA2BC,OAA3B,EAAoC;AACzC,SAAO;AAAE;AACPC,IAAAA,IAAI,EAAEH,GAAG,CAACI,WADL;AAELF,IAAAA;AAFK,GAAP;AAID;AAED,OAAO,SAASG,WAAT,GAAuB;AAC5B,SAAO;AACLF,IAAAA,IAAI,EAAEH,GAAG,CAACM;AADL,GAAP;AAGD;AAED,OAAO,SAASC,YAAT,GAAwB;AAC7B,SAAO;AACLJ,IAAAA,IAAI,EAAEH,GAAG,CAACQ;AADL,GAAP;AAGD;AAED,OAAO,SAASC,aAAT,CAAuBP,OAAvB,EAAgC;AACrC,SAAO;AACLC,IAAAA,IAAI,EAAEH,GAAG,CAACU,cADL;AAELR,IAAAA;AAFK,GAAP;AAID;AAED,OAAO,SAASS,SAAT,CAAmBC,UAAnB,EAA+B;AAEpC,SAAQC,UAAD,IAAgB;AAErBA,IAAAA,UAAU,CAACJ,aAAa,CAAC,IAAD,CAAd,CAAV,CAFqB,CAEY;;AACjC,UAAMK,IAAI,GAAGC,KAAK,CAAC,8CAAD,CAAlB;AAEAD,IAAAA,IAAI,CAACE,IAAL,CAAUC,QAAQ,IAAI;AACpB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,KAFD,EAEGF,IAFH,CAEQG,SAAS,IAAI;AACnB;AACAN,MAAAA,UAAU,CAACZ,iBAAiB,CAACkB,SAAD,CAAlB,CAAV,CAFmB,CAEuB;;AAE1CN,MAAAA,UAAU,CAACN,YAAY,EAAb,CAAV,CAJmB,CAIS;AAC7B,KAPD,EAOGa,KAPH,CAOUC,CAAD,IAAO;AAEdR,MAAAA,UAAU,CAACR,WAAW,EAAZ,CAAV,CAFc,CAEa;;AAE3BiB,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CF,CAA3C;AACD,KAZD,EAYGG,OAZH,CAYW,MAAM;AAEfX,MAAAA,UAAU,CAACJ,aAAa,CAAC,KAAD,CAAd,CAAV,CAFe,CAEmB;AAEnC,KAhBD;AAkBD,GAvBD;AAwBD","sourcesContent":["// тут записываем так называемые экшн криэйторы - т.е. JS функции, которые должны сгенерировать\n// и вернуть JS объект, который в свою очередь будет описывать ACTION - событие в экосистеме Redux\nimport * as ACT from './actions';\n\nexport function updateCatalogList(payload) {\n  return { // это JS объект - и есть тот самый реальный Redux action\n    type: ACT.UPDATE_LIST,\n    payload,\n  };\n}\n\nexport function fetchFailed() {\n  return {\n    type: ACT.FETCH_FAILED,\n  }\n}\n\nexport function fetchSuccess() {\n  return {\n    type: ACT.FETCH_SUCCESS,\n  }\n}\n\nexport function updateLoading(payload) {\n  return {\n    type: ACT.UPDATE_LOADING,\n    payload,\n  }\n}\n\nexport function fetchData(searchText) {\n\n  return (dispatcher) => {\n\n    dispatcher(updateLoading(true)); // установить индикатор загрузки данных в ТРУ - включить спинер\n    const data = fetch('http://test-api.ipromote.ru/API/CATALOG/FIND');\n\n    data.then(response => {\n      return response.json();\n    }).then(localData => {\n      // this.setState({movieList: data}); - остатки от вызова в классе (когда фетчинг данных из класса)\n      dispatcher(updateCatalogList(localData)); // записать в ридакс стор список фильмов\n\n      dispatcher(fetchSuccess()); // установить статус состояния загрузки - УСПЕШНО загружены данные\n    }).catch((e) => {\n\n      dispatcher(fetchFailed()); // установить статус состояния загрузки - ПРОВАЛ данные НЕ удалось загрузить\n\n      console.log('Sabotage: data fetch ERROR.', e);\n    }).finally(() => {\n\n      dispatcher(updateLoading(false)); // установить индикатор загрузки данных в FALSE (выключить спинер)\n\n    });\n\n  }\n}\n"]},"metadata":{},"sourceType":"module"}